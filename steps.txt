1. Create a VPC
  - Go to VPC → Your VPCs → Create VPC.
  - Name: MyVPC
  - IPv4 CIDR block: 10.0.0.0/16 -> 10.0.0.0/24
  - Tenancy: Default
  - VPC created.

2. Create Subnet
  - Go to Subnets → Create subnet.
  - VPC: MyVPC
  - Availability Zone: e.g., ap-south-1a
  - IPv4 CIDR block: 10.0.1.0/24 -> main is 10.0.<>
  - Subnet created (public subnet).

3. Go to Route Tables → Create route table.
  - VPC: MyVPC
  - Name: PublicRouteTable
  - Add routes:
    • 10.0.0.0/16 → local (default)
    • 0.0.0.0/0 → MyIGW
  - Associate 10.0.1.0/24 subnet with this route table.
  - Set it as the main routing table from the edit options

4. Create Internet Gateway (IGW)
  - Go to Internet Gateways → Create internet gateway.
  - Name: MyIGW
  - Attach it to MyVPC -> from the edit option in the igw
  - IGW created and attached.

5. Create Security Group
  - Go to Security Groups → Create security group.
  - VPC: MyVPC
  - Name: MySG
  - Inbound rules:
    • SSH (22) → My IP
    • HTTP (80) → 0.0.0.0/0
    • HTTPS (443) → 0.0.0.0/0
  - Outbound rules: Allow all (default).

6. Launch EC2 Instance
  - Go to EC2 → Launch instance.
  - AMI: Amazon Linux 2 / Ubuntu
  - Instance type: t2.micro
  - Network: MyVPC
  - Subnet: 10.0.1.0/24
  - Auto-assign Public IP: Enable
  - Security Group: MySG
  - Launch with key pair.

7. Attach a Elastic IP to the instance

8. Attach the Elastic IP to the EC2 [from Elastic IP]

9. Init git, and create a secrets and variable in actions

10. Create a action runner from github settings

11. sudo ./svc.sh install
    sudo ./svc.sh start 

12. Go to action runner in that select CI / CD -> nodejs

name: Node.js CI/CD Production

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.x]
        
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm ci

    - name: Create .env from secret
      env:
        PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
      run: |
        printf '%s\n' "$PROD_ENV_FILE" > .env
        chmod 600 .env


13. Check if the .env is created


14. NODEJS AND NGNIX
INSTALLING NODEJS AND NIGINIX
# 1. Update your package list
sudo apt update && sudo apt upgrade -y

# 2. Add NodeSource repo for Node.js 20.x
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -

# 3. Install Node.js and npm
sudo apt-get install -y nodejs

# 4. (Optional but recommended) install build tools
sudo apt-get install -y build-essential

# 5. Verify versions
node -v
npm -v

#nginx install
sudo apt-get install -y nginx

#install pm2
sudo npm i -g pm2
pm2 -> for checking

#setting up the proxy
cd /etc/nginx/sites-available
sudo nano default
location /api {
    proxy_pass http://localhost:5000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
restart the nginx
sudo nginx -t
sudo systemctl reload nginx
sudo systemctl restart ngnix

#go the folder of the github

#setup the pm2
  pm2 start server.mjs --name=SolveStackBackend

15. Update the ci/cd
- name: pm2 restart
    run: pm2 restart SolveStackBackend
